#!@SH_PROG@
# -*- shell-script -*-
# Top-level debugger program. This program may be initially invoked.
#
#   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 
#   2009, 2010, 2011  Rocky Bernstein <rocky@gnu.org>
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License as
#   published by the Free Software Foundation; either version 2, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   General Public License for more details.
#   
#   You should have received a copy of the GNU General Public License
#   along with this program; see the file COPYING.  If not, write to
#   the Free Software Foundation, 59 Temple Place, Suite 330, Boston,
#   MA 02111 USA.
#

# The alternate way to invoke debugger, "bash --debugger", has some
# advantages: it sets $0 correctly and doesn't show this script in
# the call trace. However the bash has been a bit inflexible and
# quirky so sadly this script seems to be needed more than it would
# normally.

# Name we refer to ourselves by
typeset _Dbg_debugger_name='@PACKAGE@'

# The shell we are configured to run under.
typeset _Dbg_shell='@SH_PROG@'

# The release name we are configured to run under.
typeset _Dbg_release='@PACKAGE_VERSION@'

# Wrapper for debugger called from within bash via bash --debugger
typeset _Dbg_bashdb_main='@BASHDB_MAIN@'

# The short shell name. Helps keep code common in bash, zsh, and ksh debuggers.
typeset _Dbg_shell_name=${_Dbg_shell##*/}  # Equivalent to basename(_Dbg_shell)

# Original $0. Note we can't set this in an include.
typeset _Dbg_orig_0=$0

# Equivalent to basename $0; the short program name
typeset _Dbg_pname=${0##*/}  

## Stuff set by autoconf/configure ###
typeset  prefix=@prefix@  # @PKGDATADIR@ often uses $prefix
typeset _Dbg_libdir=@PKGDATADIR@
###

# We agonize a bit over _Dbg_libdir: the root directory for where
# debugger code is stored.
[[ -d $_Dbg_libdir ]] || _Dbg_libdir=${_Dbg_bashdb_main%/*}  # dirname(_Dbg_bashdb_main)
[[ -d $_Dbg_libdir ]] || _Dbg_libdir='.'

# More _Dbg_libdir finding: respect any library option the user has
# supplied over any of the above guesses. Go over options and parse
# just the library option.
typeset -xa _Dbg_script_args; _Dbg_script_args=("$@")
typeset -i _Dbg_i
for ((_Dbg_i=0; _Dbg_i<${#_Dbg_script_args[@]}-1; _Dbg_i++)) ; do 
    typeset arg=${_Dbg_script_args[$_Dbg_i]}
    if [[ $arg == '-L' || $arg == '--library' ]] ; then
	((_Dbg_i++))
	_Dbg_libdir="${_Dbg_script_args[$_Dbg_i]}"
	break
    fi
done

# All _Dbg_libdir setting done above. Have we succeeded? 
if [[ ! -d $_Dbg_libdir ]] ; then 
  echo "${_Dbg_pname}: Can't read debugger library directory '${_Dbg_libdir}'." >&2
  echo "${_Dbg_pname}: Perhaps @PACKAGE@ is installed wrong (if its installed)." >&2
  echo "${_Dbg_pname}: Try running @PACKAGE@ using -L (with a different directory)." >&2
  echo "${_Dbg_pname}: Run @PACKAGE@ --help for a list and explanation of options." >&2
  exit 1
fi

typeset _Dbg_main="$_Dbg_libdir/dbg-main.sh"
if [[ ! -r $_Dbg_main ]] ; then 
  print "${_Dbg_pname}: Can't read debugger library file '${_Dbg_main}'." >&2
  print "${_Dbg_pname}: Perhaps @PACKAGE@ is installed wrong (if its installed)." >&2
  print "${_Dbg_pname}: Try running @PACKAGE@ using -L (with a different directory)." >&2
  print "${_Dbg_pname}: Run @PACKAGE@ --help for a list and explanation of options." >&2
  exit 1
fi

# Pull in the rest of the debugger code.
. $_Dbg_main

# I don't know why when this is done in dbg-opts.sh it doesn't have
# an effect.
((OPTLIND > 0)) && shift "$((OPTLIND - 1))"

if (($# == 0)) && [[ -z $_Dbg_EXECUTION_STRING ]] ; then
    echo >&2 "${_Dbg_pname}: need to give a script to debug or use the -c option."
    exit 1
fi
    
_Dbg_script_file="$1"
shift

if [[ ! -d $_Dbg_tmpdir ]] && [[ ! -w $_Dbg_tmpdir ]] ; then
  echo "${_Dbg_pname}: cannot write to temp directory $_Dbg_tmpdir." >&2
  echo "${_Dbg_pname}: Use -T try directory location." >&2
  exit 1
fi

# Note that this is called via bashdb rather than "bash --debugger"
_Dbg_script=1

if [[ -n $_Dbg_EXECUTION_STRING ]] ; then
    _Dbg_script_file=$(_Dbg_tempname cmd)
    echo "$_Dbg_EXECUTION_STRING" >$_Dbg_script_file
fi

if [[ ! -r "$_Dbg_script_file" ]] ; then
    echo "${_Dbg_pname}: cannot read program to debug: ${_Dbg_script_file}." >&2
    exit 1
fi

typeset -r _Dbg_Dbg_script_file=$(_Dbg_expand_filename $_Dbg_script_file)

if ((_Dbg_linetrace)) ; then 
  # No stepping.
  _Dbg_write_journal_eval "_Dbg_step_ignore=-1" 
  _Dbg_QUIT_ON_QUIT=1
else 
  # Set to skip over statements up to ". $_Dbg_script_file"
  _Dbg_write_journal_eval "_Dbg_step_ignore=3" 
fi
_Dbg_init_default_traps
trap '_Dbg_debug_trap_handler 0 "$BASH_COMMAND" "$@"' DEBUG
set -o functrace
. "$_Dbg_script_file"
