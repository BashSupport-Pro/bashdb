#!@BASH_PROG@
# -*- shell-script -*-

test_defined()
{
    typeset p=5
    assertEquals 1 "$(_Dbg_defined p)"
    unset p
    assertEquals 0 "$(_Dbg_defined p)"
    _Dbg_defined? p
    assertFalse 'p should now not defined' '$?' 
}

test_esc_dq()
{
    assertEquals 'abc' $(_Dbg_esc_dq abc)
    assertEquals '\\\"abc\\\"' $(_Dbg_esc_dq '\"abc\"')
    assertEquals '\\\"a\\bc\\\"' $(_Dbg_esc_dq '\"a\bc\"')
}

test_is_function()
{
    unset function_test
    _Dbg_is_function? function_test
    assertFalse 'test_function should not be defined' "$?"
    typeset -i function_test=1
    _Dbg_is_function? function_test
    assertFalse 'test_function should still not be defined' "$?"
    function_test() { :; }
    _Dbg_is_function? function_test
    assertTrue 'test_function should now be defined' "$?"
    function another_function_test { :; }
    _Dbg_is_function? another_function_test "$?"
}

test_onoff()
{
    assertEquals 'on.' $(_Dbg_onoff 1)
    assertEquals 'off.' $(_Dbg_onoff 0)
}

test_set_debugger_internal()
{
    typeset  _Dbg_space_IFS=' '
    _Dbg_set_debugger_internal
    assertEquals "$_Dbg_space_IFS" "$IFS"
##    assertEquals '+ dbg (${.sh.file}:${LINENO}[$.sh.subshell]): ${.sh.fun}\n' $PS4
}

test_split()
{
    local -a words
    words=($(_Dbg_split ':' 'foo:bar'))
    assertEquals 'foo' ${words[0]}
    assertEquals 'bar' ${words[1]}
    words=($(_Dbg_split ':' 'foo'))
    assertEquals 'foo' ${words[0]}
}

# load shunit2
top_srcdir=@top_builddir@
. ${top_srcdir}/dbg-fns.inc

. ./shunit2

