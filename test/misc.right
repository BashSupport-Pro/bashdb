(dbg-test2.sh:23):
23:	set -xv
+# Test of miscellaneous commands:
+# 'source', 'info args', 'show args', 'show warranty', 'show copying', etc.
+#### source command...
+source prof1.cmd
+set trace-commands on
+# Test a profile
+print "prof1.cmd called"
prof1.cmd called
+source prof2.cmd
+set trace-commands on
+# Test a profile
+print prof2.cmd called...
prof2.cmd called...
+print calling prof1.cmd...
calling prof1.cmd...
+source prof1.cmd
+set trace-commands on
+# Test a profile
+print "prof1.cmd called"
prof1.cmd called
+######################################### 
+#### Test that ARGs are correct...
+print "_Dbg_arg#: ${#_Dbg_arg[@]}"
_Dbg_arg#: 2
+print "\$1: $1"
$1: testarg1
+print "\$2: $2"
$2: testarg2
+######################################### 
+#### Testing script args...
+info args
$1 = dbg-test2.sh
+######################################### 
+tty 
Argument required (terminal name for running target process).
+#### *** GNU things...
+info warranty

			    NO WARRANTY

  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
REPAIR OR CORRECTION.

  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.

+#### help commands...
+help 
bashdb commands:
List/search source lines:                 Control script execution:
-------------------------                 -------------------------
 l [start|.] [cnt] List cnt lines         T [n]        Stack trace
                   from line start        s [n]        Single step [n times]
 l sub       List source code fn          n [n]        Next, steps over subs
 - or .      List previous/current line   <CR>/<Enter> Repeat last n or s 
 w [line]    List around line             c [linespec] Continue [to linespec]
 f filename  View source in file          L            List all breakpoints
 /pat/       Search forward for pat       b linespec   Set breakpoint
 ?pat?       Search backward for pat      del [n].. or D Delete a/all breaks
                                                         by entry number
Debugger controls:                        skip         skip execution of cmd
-------------------------                 cl linespec  Delete breakpoints by
 H [num]         Show last num commands                line spec
 q [exp] or ^D   Quit returning exp       R [args]     Attempt a restart
 info [cmd]      Get info on cmd.         u [n]        Go up stack by n or 1.
 !n or hi n      Run debugger history n   do [n]       Go down stack by n or 1.
 h or ? [cmd]    Get help on command      W [var]      Add watchpoint. If no
 info [cmd]      Get info on cmd                       no expr, delete all
 show [cmd]      Show settings            We [expr]    Add Watchpoint arith 
                                                       expr
 so file         read in dbg commands     t            Toggle trace
                                          en/di n      enable/disable brkpt,
 set x y         set a debugger variable               watchpoint, or display
 e bash-cmd      evaluate a bash command  tb linespec  Add one-time break
 disp expr       add a display expr       a linespec cmd eval "cmd" at linespec
 M               Show module versions     A            delete all actions
 x expr          evaluate expression      ret          jump out of fn or source
                 (via declare, let, eval) finish       execute until return
 deb             debug into another       cond n exp   set breakpoint condition
                 shell script
 !! cmd [args]   execute shell command "cmd" with "args"
 file filename   Set script filename to read for current source.
 load filename   read in Bash source file use in list and break commands

Data Examination: also see e, t, x
-------------------------                 
 p variable      Print variable 
 V [[!]pat]      List variable(s) matching or not (!) matching pattern pat
 S [[!]pat]      List subroutine names [not] matching pattern pat

Readline command line editing (emacs/vi mode) is available.
For more help, type h <cmd> or consult online-documentation.
+help set
set args -- Set argument list to give program being debugged when it is started.
Follow this command with any number of args, to be passed to the program.
set annotate  -- Set annotation level.
set basename  -- Set short filenames (the basename) in debug output is on.
set debugger  -- Set debugging the debugger is debugger
set editing   -- Set editing of command lines as they are typed is off.
set linetrace -- Set tracing execution of lines before executed is off.
set listsize  -- Set number of source lines bashdb will list by default.
set prompt    -- bashdb's prompt is:
       "bashdb${_Dbg_less}${#_Dbg_history[@]}${_Dbg_greater}$_Dbg_space".
set showcommand -- Set showing the command to execute is auto.
set trace-commands -- Set showing debugger commands is on.
+help set foo
There is no "set foo" command.
+help set ar
Set argument list to give program being debugged when it is started.
Follow this command with any number of args, to be passed to the program.
+help set annotate
Set annotation level.
0 == normal;     1 == fullname (for use when running under emacs).
+help set listsize
Set number of source lines bashdb will list by default.
+help set prompt
bashdb's prompt is:
       "bashdb${_Dbg_less}${#_Dbg_history[@]}${_Dbg_greater}$_Dbg_space".
+help set editing
Set editing of command lines as they are typed is off.
+help tty
tt  tty-name     Set the output device for debugger output
                 Long command name: tty.
+help info
List of info subcommands:

info args -- Argument variables (e.g. $1, $2, ...) of the current stack frame.
info breakpoints -- Status of user-settable breakpoints
info display -- Show all display expressions
info files -- Source files in the program
info functions -- All function names
info line -- list current line number and and file name
info program -- Execution status of the program.
info signals -- What debugger does when program gets various signals
info source -- Information about the current source file
info stack -- Backtrace of the stack
info terminal -- Print terminal device
info variables -- All global and static variable names
info warranty -- Various kinds of warranty you do not have
+info 
Info subcommands are: args breakpoints display files functions program source sources stack terminal variables watchpoints
+#### history...
+H 
27: info 
26: help info
25: help tty
24: help set editing
23: help set prompt
22: help set listsize
21: help set annotate
20: help set ar
19: help set foo
18: help set
17: help 
16: info warranty
15: tty 
14: info args
13: print "\$2: $2"
12: print "\$1: $1"
11: print "_Dbg_arg#: ${#_Dbg_arg[@]}"
10: print "prof1.cmd called"
9: set trace-commands on
8: source prof1.cmd
7: print calling prof1.cmd...
6: print prof2.cmd called...
5: set trace-commands on
4: source prof2.cmd
3: print "prof1.cmd called"
2: set trace-commands on
1: source prof1.cmd
0: set trace-commands on
+H 5
5: set trace-commands on
4: source prof2.cmd
3: print "prof1.cmd called"
2: set trace-commands on
1: source prof1.cmd
0: set trace-commands on
+H 5 3
5: set trace-commands on
4: source prof2.cmd
3: print "prof1.cmd called"
+hi 11
_Dbg_arg#: 2
+!11 
_Dbg_arg#: 2
+!19:p 
19: help set foo
+!-3:p 
25: help tty
+!-2 
List of info subcommands:

info args -- Argument variables (e.g. $1, $2, ...) of the current stack frame.
info breakpoints -- Status of user-settable breakpoints
info display -- Show all display expressions
info files -- Source files in the program
info functions -- All function names
info line -- list current line number and and file name
info program -- Execution status of the program.
info signals -- What debugger does when program gets various signals
info source -- Information about the current source file
info stack -- Backtrace of the stack
info terminal -- Print terminal device
info variables -- All global and static variable names
info warranty -- Various kinds of warranty you do not have
+! 2
+H -2
27: info 
26: help info
+H foo
Invalid history number: foo
+H 100000
27: info 
26: help info
25: help tty
24: help set editing
23: help set prompt
22: help set listsize
21: help set annotate
20: help set ar
19: help set foo
18: help set
17: help 
16: info warranty
15: tty 
14: info args
13: print "\$2: $2"
12: print "\$1: $1"
11: print "_Dbg_arg#: ${#_Dbg_arg[@]}"
10: print "prof1.cmd called"
9: set trace-commands on
8: source prof1.cmd
7: print calling prof1.cmd...
6: print prof2.cmd called...
5: set trace-commands on
4: source prof2.cmd
3: print "prof1.cmd called"
2: set trace-commands on
1: source prof1.cmd
0: set trace-commands on
+history -2
List of info subcommands:

info args -- Argument variables (e.g. $1, $2, ...) of the current stack frame.
info breakpoints -- Status of user-settable breakpoints
info display -- Show all display expressions
info files -- Source files in the program
info functions -- All function names
info line -- list current line number and and file name
info program -- Execution status of the program.
info signals -- What debugger does when program gets various signals
info source -- Information about the current source file
info stack -- Backtrace of the stack
info terminal -- Print terminal device
info variables -- All global and static variable names
info warranty -- Various kinds of warranty you do not have
+history 10000
Number 10000 should be less than 28
+#### pwd/cd commands...
+pwd 
Working directory test.
+cd .
Working directory test.
+########################## 
+#### Test 'prompt' and 'tty' ...
+set prompt bashdb${_Dbg_greater}$_Dbg_hi${_Dbg_less}$_Dbg_space
+show prompt
bashdb's prompt is:
       "bashdb${_Dbg_greater}$_Dbg_hi${_Dbg_less}$_Dbg_space".
+tty /tmp/misc-output.check
