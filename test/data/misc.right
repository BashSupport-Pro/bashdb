(dbg-test2.sh:24):
24:	set -xv
+set basename on
+# Test of miscellaneous commands:
+# 'source', 'info args', 'show args', 'show warranty', 'show copying', etc.
+#### source command...
+set width 75
+source ../data/prof1.cmd
+set trace-commands on
+# Test a profile
+print "prof1.cmd called"
prof1.cmd called
+source ../data/prof2.cmd
+set trace-commands on
+# Test a profile
+print prof2.cmd called...
prof2.cmd called...
+print calling prof1.cmd...
calling prof1.cmd...
+source ../data/prof1.cmd
+set trace-commands on
+# Test a profile
+print "prof1.cmd called"
prof1.cmd called
+#########################################
+#### Test that ARGs are correct...
+print "_Dbg_arg#: ${#_Dbg_arg[@]}"
_Dbg_arg#: 0
+print "\$1: $1"
$1:
+print "\$2: $2"
$2:
+#########################################
+#### Testing script args...
+## FIXME:
+## info args
+#########################################
+tty
Argument required (terminal name for running target process).
+#### *** GNU things...
+info warranty

			    NO WARRANTY

  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
REPAIR OR CORRECTION.

  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.

+#### help commands...
+help
Available commands:
-------------------
  /          debug    enable   help     next     show    step-      untrace
  alias      delete   eval     history  print    signal  tbreak     up
  break      disable  examine  info     pwd      skip    trace      watch
  commands   display  file     kill     quit     source  tty        where
  condition  down     frame    list     restart  step    unalias
  continue   edit     handle   load     set      step+   undisplay

Readline command line editing (emacs/vi mode) is available.
Type "help" followed by command name for full documentation.
+help set
set args -- Set argument list to give program being debugged when it is started.
Follow this command with any number of args, to be passed to the program.
set annotate  -- Set annotation level.
set autoeval  -- Evaluate unrecognized commands is off.
set basename  -- Set short filenames (the basename) in debug output is on.
set debugging -- Set debugging the debugger is debugger
set editing   -- Set editing of command lines as they are typed is on.
set linetrace -- Set tracing execution of lines before executed is off.
set listsize  -- Set number of source lines bashdb will list by default.
set prompt    -- bashdb's prompt is:
       "bashdb${_Dbg_less}${#_Dbg_history[@]}${_Dbg_greater}$_Dbg_space".
set showcommand -- Set showing the command to execute is auto.
set trace-commands -- Set showing debugger commands is on.
+help set foo
There is no "set foo" command.
+help set ar
Set argument list to give program being debugged when it is started.
Follow this command with any number of args, to be passed to the program.
+help set annotate
Set annotation level.
0 == normal;     1 == fullname (for use when running under emacs).
+help set listsize
Set number of source lines bashdb will list by default.
+help set prompt
bashdb's prompt is:
       "bashdb${_Dbg_less}${#_Dbg_history[@]}${_Dbg_greater}$_Dbg_space".
+help set editing
Set editing of command lines as they are typed is on.
+help tty
tty -- Set the output device for debugger output.
+help info
List of info subcommands:

info args -- Argument variables (e.g. $1, $2, ...) of the current stack frame.
info breakpoints -- Status of user-settable breakpoints
info display -- Show all display expressions
info files -- Source files in the program
info functions -- All function names
info line -- list current line number and and file name
info program -- Execution status of the program.
info signals -- What debugger does when program gets various signals
info source -- Information about the current source file
info stack -- Backtrace of the stack
info terminal -- Print terminal device
info variables -- All global and static variable names
info warranty -- Various kinds of warranty you do not have
+info
Info subcommands are:
  args         display  functions  source   stack     variables
  breakpoints  files    program    sources  terminal  watchpoints
+#### history...
+H
28: info
27: help info
26: help tty
25: help set editing
24: help set prompt
23: help set listsize
22: help set annotate
21: help set ar
20: help set foo
19: help set
18: help
17: info warranty
16: tty
15: print "\$2: $2"
14: print "\$1: $1"
13: print "_Dbg_arg#: ${#_Dbg_arg[@]}"
12: print "prof1.cmd called"
11: set trace-commands on
10: source ../data/prof1.cmd
9: print calling prof1.cmd...
8: print prof2.cmd called...
7: set trace-commands on
6: source ../data/prof2.cmd
5: print "prof1.cmd called"
4: set trace-commands on
3: source ../data/prof1.cmd
2: set width 75
1: set basename on
0: set trace-commands on
+H 5
5: print "prof1.cmd called"
4: set trace-commands on
3: source ../data/prof1.cmd
2: set width 75
1: set basename on
0: set trace-commands on
+H 5 3
5: print "prof1.cmd called"
4: set trace-commands on
3: source ../data/prof1.cmd
+history 11
+!11
+!19:p
19: help set
+!-3:p
27: help info
+! -2
List of info subcommands:

info args -- Argument variables (e.g. $1, $2, ...) of the current stack frame.
info breakpoints -- Status of user-settable breakpoints
info display -- Show all display expressions
info files -- Source files in the program
info functions -- All function names
info line -- list current line number and and file name
info program -- Execution status of the program.
info signals -- What debugger does when program gets various signals
info source -- Information about the current source file
info stack -- Backtrace of the stack
info terminal -- Print terminal device
info variables -- All global and static variable names
info warranty -- Various kinds of warranty you do not have
+! 2
+H -2
28: info
27: help info
+H foo
Invalid history number: foo
+H 100000
28: info
27: help info
26: help tty
25: help set editing
24: help set prompt
23: help set listsize
22: help set annotate
21: help set ar
20: help set foo
19: help set
18: help
17: info warranty
16: tty
15: print "\$2: $2"
14: print "\$1: $1"
13: print "_Dbg_arg#: ${#_Dbg_arg[@]}"
12: print "prof1.cmd called"
11: set trace-commands on
10: source ../data/prof1.cmd
9: print calling prof1.cmd...
8: print prof2.cmd called...
7: set trace-commands on
6: source ../data/prof2.cmd
5: print "prof1.cmd called"
4: set trace-commands on
3: source ../data/prof1.cmd
2: set width 75
1: set basename on
0: set trace-commands on
+history -2
List of info subcommands:

info args -- Argument variables (e.g. $1, $2, ...) of the current stack frame.
info breakpoints -- Status of user-settable breakpoints
info display -- Show all display expressions
info files -- Source files in the program
info functions -- All function names
info line -- list current line number and and file name
info program -- Execution status of the program.
info signals -- What debugger does when program gets various signals
info source -- Information about the current source file
info stack -- Backtrace of the stack
info terminal -- Print terminal device
info variables -- All global and static variable names
info warranty -- Various kinds of warranty you do not have
+history 10000
** Number 10000 (10000) should be less than 29
+#### pwd/cd commands...
+pwd
Working directory integration.
+cd .
Working directory integration.
+##########################
+#### Test 'prompt' and 'tty' ...
+set prompt bashdb${_Dbg_greater}$_Dbg_hi${_Dbg_less}$_Dbg_space
+show prompt
bashdb's prompt is:
       "bashdb${_Dbg_greater}$_Dbg_hi${_Dbg_less}$_Dbg_space".
+tty /tmp/misc-output.check
